#
# Copyright contributors to the Galasa project 
#
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: codecoverage-run
spec:
  workspaces:
  - name: git-workspace
    mountPath: /workspace/git
#
#
#
  params:
  - name: distBranch
    type: string
  - default: {{ .Values.mavenProxy }}
    name: mavenCentralRepo
    type: string
  - default: {{ .Values.mavenProxy }}
    name: managersSourceRepo
    type: string
  - name: dockerRepo
    type: string
    default: {{ .Values.dockerRegistry }}
#
#
#
  steps:
#
# Get all the sources and classes for all bundles marked for copyright checking in the release.yaml
#
  - name: generate-pom-sources
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    workingDir: /workspace
    command:
    - galasabld
    - template
    - --releaseMetadata
    - /workspace/git/framework/release.yaml
    - --releaseMetadata
    - /workspace/git/extensions/release.yaml
    - --releaseMetadata
    - /workspace/git/managers/release.yaml
    - --releaseMetadata
    - /workspace/git/obr/release.yaml
    - --template
    - /workspace/git/obr/codecoveragetemplates/pomfetch.template
    - --output
    - pom.xml
    - --codecoverage
#
# TEMP - lets see what was templated
#
  - name: cattemplate
    workingDir: /workspace
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    command:
    - cat
    - pom.xml
#
# Perform the actual fetch
#
  - name: fetch-maven-artifacts
    image: $(params.dockerRepo)/galasadev/galasa-build
    workingDir: /workspace
    command:
    - mvn
    - -Dgalasa.source.repo=$(params.managersSourceRepo)
    - -Dgalasa.central.repo=$(params.mavenCentralRepo)
    - --settings
    - /workspace/git/obr/settings.xml
    - -B
    - -e
    - -fae
    - process-sources
#
# Run the codecoverage tests in Galasa
#
  - name: run-tests
    workingDir: /workspace
    image: $(params.dockerRepo)/galasadev/galasa-cli-ibm-amd64:{{ .Values.cliVersion }}
    imagePullPolicy: Always
    command:
    - galasactl
    - runs
    - submit
#
    - --stream
    - inttests
    - --tag
    - codecoverage
    - --trace
#
    - --bootstrap
    - http://galasa-cicsk8s.hursley.ibm.com/bootstrap
    - --throttle
    - '1' 
    - --throttlefile
    - throttle
    - --poll
    - '10'
    - --progress
    - '1'
#
    - --reportyaml
    - tests.yaml
#
    - --override
    - galasaecosystem.runtime.repository=http://galasadev-cicsk8s.hursley.ibm.com/codecov/maven/obr
    - --override
    - galasaecosystem.docker.version=codecov
    - --override
    - java.jacoco.code.coverage=true
    - --override
    - java.jacoco.save.location=https://nexus.galasa.dev/repository/jacoco/codecov/execs
    - --override
    - java.jacoco.save.credentials=JACOCO
    - --override
    - zos.dse.tag.PRIMARY.imageid=MV2D
    - --override
    - zos.dse.tag.PRIMARY.clusterid=PLEX2
#
# TEMP - See the results
#
  - name: catresults
    workingDir: /workspace
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    command:
    - cat
    - tests.yaml
#
# Fetch all the jacoco exec files
#
  - name: fetchexecs
    workingDir: /workspace
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    command:
    - galasabld
    - jacocofetch
    - --results 
    - tests.yaml 
    - --output
    - target/inttests
    - --execs
    - https://nexus.galasa.dev/repository/jacoco/codecov/execs  
#
# TEMP - Make sure target is populated
#
  - name: lsexecs
    workingDir: /workspace
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    command:
    - ls
    - -l
    - target/inttests
#
# Build Unit test view
#
  - name: build-unit-tests
    workingDir: /workspace
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    script: |
      set -e
      mkdir -p target/image/unit

      java -jar target/org.jacoco.cli.jar merge target/unittests/*.exec --destfile target/image/unit/jacoco.exec

      java -jar target/org.jacoco.cli.jar report target/image/unit/jacoco.exec --classfiles target/classes --sourcefiles target/sources --name 'Galasa CC Unit only' --html target/image/unit/ --xml target/image/unit/jacoco.xml
#
# TEMP - Make sure target is populated
#
  - name: lshtml
    workingDir: /workspace/target/image/unit/
    image: $(params.dockerRepo)/galasadev/galasa-build:{{ .Values.buildImage }}
    command:
    - ls
    - -l
